/** @file cargarDatos.java
 @brief Codigo de cargar datos
 */

package presentacion;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import javax.swing.filechooser.FileSystemView;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.Locale;

/**
 *
 */
public class cargarDatos extends JFrame {
    CtrlPresentacion pCtrlPresentacion;
    private JButton seleccionarDirectorioButton;
    private JLabel id;
    private JPanel panel1;
    private JButton proc;

    public cargarDatos(CtrlPresentacion iCtrlPresentacion) {
        pCtrlPresentacion = iCtrlPresentacion;

        seleccionarDirectorioButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                JFileChooser chooser = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
                chooser.setDialogTitle("Selecciona la carpeta que conté el set de dades");
                chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
                chooser.setCurrentDirectory(new File(System.getProperty("user.dir") + "/DATA/csv"));
                int returnValue = chooser.showOpenDialog(null);

                if (returnValue == JFileChooser.APPROVE_OPTION) {
                    File arxiu = chooser.getSelectedFile();
                    String path = arxiu.getAbsolutePath();
                    try {
                        pCtrlPresentacion.cargarDatos(path);
                        setVisible(false);
                        iCtrlPresentacion.changeFrame("vistaPrincipal");
                    } catch (Exception err) {
                        hayError(err.toString());
                    }
                }
            }
        });

        proc.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                JFileChooser chooser = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
                chooser.setDialogTitle("Selecciona la carpeta que conté el set de dades");
                chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
                chooser.setCurrentDirectory(new File(System.getProperty("user.dir") + "/DATA/procesado"));
                int returnValue = chooser.showOpenDialog(null);

                if (returnValue == JFileChooser.APPROVE_OPTION) {
                    File arxiu = chooser.getSelectedFile();
                    String path = arxiu.getAbsolutePath();
                    try {
                        boolean eval = false;
                        if (JOptionPane.showConfirmDialog(null, "QUIERES EVALUAR LA RECOMENDACIÓN?", "EVAL",
                                JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                            eval = true;
                        }
                        pCtrlPresentacion.cargarDatosProcesados(path, eval);
                        setVisible(false);
                        iCtrlPresentacion.changeFrame("usuarioMain");
                    } catch (Exception err) {
                        hayError(err.toString());
                    }
                }
            }
        });

        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                add(panel1);
                //setJMenuBar(menubar);
                setVisible(true);
            }
        });
    }

    public void hayError(String s) {
        JOptionPane.showMessageDialog(new JFrame(), s);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new BorderLayout(0, 0));
        panel1.setMaximumSize(new Dimension(750, 500));
        panel1.setMinimumSize(new Dimension(750, 500));
        panel1.setPreferredSize(new Dimension(750, 500));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new BorderLayout(0, 0));
        panel2.setBackground(new Color(-13421238));
        panel2.setMaximumSize(new Dimension(300, 500));
        panel2.setMinimumSize(new Dimension(300, 500));
        panel2.setOpaque(true);
        panel2.setPreferredSize(new Dimension(300, 500));
        panel1.add(panel2, BorderLayout.WEST);
        final JLabel label1 = new JLabel();
        label1.setBackground(new Color(-13421238));
        Font label1Font = this.$$$getFont$$$("Bangla MN", Font.PLAIN, 36, label1.getFont());
        if (label1Font != null) label1.setFont(label1Font);
        label1.setForeground(new Color(-1));
        label1.setHorizontalAlignment(0);
        label1.setHorizontalTextPosition(0);
        label1.setPreferredSize(new Dimension(241, 66));
        label1.setText("Bienvenido");
        label1.setVerticalAlignment(0);
        panel2.add(label1, BorderLayout.CENTER);
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new BorderLayout(0, 0));
        panel3.setBackground(new Color(-1));
        panel3.setMaximumSize(new Dimension(450, 500));
        panel3.setMinimumSize(new Dimension(450, 500));
        panel3.setPreferredSize(new Dimension(450, 500));
        panel1.add(panel3, BorderLayout.CENTER);
        final JPanel panel4 = new JPanel();
        panel4.setLayout(new GridLayoutManager(5, 2, new Insets(10, 10, 10, 10), -1, -1));
        panel4.setBackground(new Color(-1));
        panel4.setMaximumSize(new Dimension(300, 500));
        panel4.setMinimumSize(new Dimension(300, 500));
        panel4.setPreferredSize(new Dimension(-1, -1));
        panel3.add(panel4, BorderLayout.CENTER);
        id = new JLabel();
        Font idFont = this.$$$getFont$$$("Bangla Sangam MN", -1, -1, id.getFont());
        if (idFont != null) id.setFont(idFont);
        id.setHorizontalAlignment(2);
        id.setHorizontalTextPosition(2);
        id.setText("DIRECTORIO:");
        panel4.add(id, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_SOUTHWEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 2, false));
        final JPanel panel5 = new JPanel();
        panel5.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), 5, 5));
        panel5.setBackground(new Color(-1));
        panel4.add(panel5, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setAlignmentY(0.0f);
        label2.setAutoscrolls(false);
        label2.setBackground(new Color(-13421238));
        Font label2Font = this.$$$getFont$$$("Bangla MN", -1, 14, label2.getFont());
        if (label2Font != null) label2.setFont(label2Font);
        label2.setForeground(new Color(-13421238));
        label2.setHorizontalAlignment(0);
        label2.setHorizontalTextPosition(0);
        label2.setMaximumSize(new Dimension(100, 100));
        label2.setMinimumSize(new Dimension(100, 100));
        label2.setPreferredSize(new Dimension(100, 100));
        label2.setText("<html> Para empezar, selecciona el directorio desde el que quieres trabajar </html>");
        panel5.add(label2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JSeparator separator1 = new JSeparator();
        panel4.add(separator1, new GridConstraints(4, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, new Dimension(500, 100), new Dimension(500, 100), new Dimension(500, 100), 0, false));
        seleccionarDirectorioButton = new JButton();
        seleccionarDirectorioButton.setBackground(new Color(-1));
        seleccionarDirectorioButton.setText("Cagar Datos Sin Preprocesar");
        panel4.add(seleccionarDirectorioButton, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        proc = new JButton();
        proc.setText("Cargar Datos Preprocesados");
        panel4.add(proc, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }

}
